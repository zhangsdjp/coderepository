version: 0.2
# env:
#   parameter-store:
#     DOCKER_USER: dockerhub-user
#     DOCKER_TOKEN: dockerhub-token

phases: 
  install:  
    runtime-versions:  
      java: corretto11
    # commands:
    #   - echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin

  # pre_build:
  #   commands:
  #     - ACCOUNT_ID=$(echo ${CODEBUILD_BUILD_ARN} | cut -f 5 -d :)
  #     - echo ACCOUNT_ID=${ACCOUNT_ID}
  #     - REPOSITORY_URI=${ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/ddvisualization_collector     
  #     - echo REPOSITORY_URI=${REPOSITORY_URI}
  #     - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
  #     - IMAGE_TAG=${COMMIT_HASH:=latest} 
  #     - echo IMAGE_TAG=${IMAGE_TAG}      
  #     - echo Logging in to Amazon ECR...
  #     - aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com

  build:
    commands:
      - echo Build started on `date`
      # - echo Building the Docker image...
      # - docker build -t $REPOSITORY_URI:latest . -f ./cicd/Dockerfile-cmd
      # - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      - echo Get latest ./cfn/sonarqube-ec2.yml from CodeCommit
      # - GROUPNAME=$(grep GroupName ./cfn/sonarqube-ec2.yml | awk -F':' '{print $2}')
      # - echo GROUPNAME_before=${GROUPNAME}
      # - |
      #   if [[ "${GROUPNAME}" == *"WebServerSG"* ]]; then 
      #     sed -i 's/GroupName: WebServerSG/GroupName: WebServer-SG/g' ./cfn/sonarqube-ec2.yml
      #     echo in if-then
      #   else 
      #     sed -i 's/GroupName: WebServer-SG/GroupName: WebServerSG/g' ./cfn/sonarqube-ec2.yml
      #     echo in if-else
      #   fi
      # - GROUPNAME=$(grep GroupName ./cfn/sonarqube-ec2.yml | awk -F':' '{print $2}')
      # - echo GROUPNAME_after=${GROUPNAME}

  post_build:
    commands:
      - echo Build completed on `date`
      # - echo Pushing the Docker images...
      # - docker push $REPOSITORY_URI:latest 
      # - docker push $REPOSITORY_URI:$IMAGE_TAG
      # - echo Writing imageDetail json...
      # - echo "{\"name\":\"${ContainerName}\",\"ImageURI\":\"${REPOSITORY_URI}:${IMAGE_TAG}\"}" > imageDetail.json

artifacts:
  files: 
    - ./cfn/*  
    # - imageDetail.json

